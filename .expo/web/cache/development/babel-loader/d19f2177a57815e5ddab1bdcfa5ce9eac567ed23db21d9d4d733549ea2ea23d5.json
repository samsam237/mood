{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\projets\\\\nino\\\\actipod\\\\mood\\\\src\\\\contexts\\\\MoodContext.js\",\n  _this = this;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { moodService } from '../services/moodService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar MoodContext = createContext();\nexport var useMood = function useMood() {\n  var context = useContext(MoodContext);\n  if (!context) {\n    throw new Error('useMood must be used within a MoodProvider');\n  }\n  return context;\n};\nexport var MoodProvider = function MoodProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    moods = _useState2[0],\n    setMoods = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  useEffect(function () {\n    loadMoods();\n  }, []);\n  var loadMoods = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        var savedMoods = yield AsyncStorage.getItem('moods');\n        if (savedMoods) {\n          setMoods(JSON.parse(savedMoods));\n        }\n      } catch (error) {\n        console.error('Error loading moods:', error);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function loadMoods() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var saveMood = function () {\n    var _ref3 = _asyncToGenerator(function* (moodData) {\n      try {\n        var newMood = _objectSpread(_objectSpread({\n          id: Date.now().toString()\n        }, moodData), {}, {\n          timestamp: new Date().toISOString()\n        });\n        var updatedMoods = [newMood].concat(_toConsumableArray(moods));\n        setMoods(updatedMoods);\n        yield AsyncStorage.setItem('moods', JSON.stringify(updatedMoods));\n        return {\n          success: true\n        };\n      } catch (error) {\n        console.error('Error saving mood:', error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    return function saveMood(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var getMoodAnalytics = function getMoodAnalytics() {\n    return moodService.generateAnalytics(moods);\n  };\n  var value = {\n    moods: moods,\n    loading: loading,\n    saveMood: saveMood,\n    getMoodAnalytics: getMoodAnalytics\n  };\n  return _jsxDEV(MoodContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, _this);\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AsyncStorage","moodService","jsxDEV","_jsxDEV","MoodContext","useMood","context","Error","MoodProvider","_ref","children","_useState","_useState2","_slicedToArray","moods","setMoods","_useState3","_useState4","loading","setLoading","loadMoods","_ref2","_asyncToGenerator","savedMoods","getItem","JSON","parse","error","console","apply","arguments","saveMood","_ref3","moodData","newMood","_objectSpread","id","Date","now","toString","timestamp","toISOString","updatedMoods","concat","_toConsumableArray","setItem","stringify","success","message","_x","getMoodAnalytics","generateAnalytics","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_this"],"sources":["C:/Users/DELL/Documents/projets/nino/actipod/mood/src/contexts/MoodContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { moodService } from '../services/moodService';\r\n\r\nconst MoodContext = createContext();\r\n\r\nexport const useMood = () => {\r\n  const context = useContext(MoodContext);\r\n  if (!context) {\r\n    throw new Error('useMood must be used within a MoodProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const MoodProvider = ({ children }) => {\r\n  const [moods, setMoods] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadMoods();\r\n  }, []);\r\n\r\n  const loadMoods = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const savedMoods = await AsyncStorage.getItem('moods');\r\n      if (savedMoods) {\r\n        setMoods(JSON.parse(savedMoods));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading moods:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const saveMood = async (moodData) => {\r\n    try {\r\n      const newMood = {\r\n        id: Date.now().toString(),\r\n        ...moodData,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n      \r\n      const updatedMoods = [newMood, ...moods];\r\n      setMoods(updatedMoods);\r\n      await AsyncStorage.setItem('moods', JSON.stringify(updatedMoods));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Error saving mood:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const getMoodAnalytics = () => {\r\n    return moodService.generateAnalytics(moods);\r\n  };\r\n\r\n  const value = {\r\n    moods,\r\n    loading,\r\n    saveMood,\r\n    getMoodAnalytics,\r\n  };\r\n\r\n  return <MoodContext.Provider value={value}>{children}</MoodContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}