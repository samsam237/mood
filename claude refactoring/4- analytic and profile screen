// ==================== ANALYTICS SCREEN ====================
// src/screens/AnalyticsScreen.js
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  Dimensions,
} from 'react-native';
import { LineChart, BarChart, PieChart } from 'react-native-chart-kit';
import { useMood } from '../contexts/MoodContext';
import Card from '../components/common/Card';
import { theme } from '../constants/theme';

const { width: screenWidth } = Dimensions.get('window');

const AnalyticsScreen = () => {
  const { moods, getMoodAnalytics } = useMood();
  const [analytics, setAnalytics] = useState(null);

  useEffect(() => {
    setAnalytics(getMoodAnalytics());
  }, [moods]);

  if (!analytics || moods.length === 0) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.emptyState}>
          <Text style={styles.emptyText}>
            No mood data available yet. Start tracking your moods to see analytics!
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  // Prepare chart data
  const chartConfig = {
    backgroundColor: theme.colors.white,
    backgroundGradientFrom: theme.colors.white,
    backgroundGradientTo: theme.colors.white,
    decimalPlaces: 1,
    color: (opacity = 1) => `rgba(99, 102, 241, ${opacity})`,
    labelColor: (opacity = 1) => `rgba(107, 114, 128, ${opacity})`,
    style: {
      borderRadius: 16,
    },
    propsForDots: {
      r: '6',
      strokeWidth: '2',
      stroke: theme.colors.primary,
    },
  };

  // Mood trend data for line chart
  const moodTrendData = {
    labels: analytics.moodTrend.slice(-7).map((item, index) => {
      const date = new Date();
      date.setDate(date.getDate() - (6 - index));
      return date.toLocaleDateString('en-US', { weekday: 'short' });
    }),
    datasets: [
      {
        data: analytics.moodTrend.slice(-7).map(item => item.value),
        color: (opacity = 1) => `rgba(99, 102, 241, ${opacity})`,
        strokeWidth: 3,
      },
    ],
  };

  // Mood distribution data for pie chart
  const moodDistributionData = Object.entries(analytics.moodDistribution).map(
    ([label, count], index) => ({
      name: label,
      population: count,
      color: [
        '#10B981', '#3B82F6', '#F59E0B', '#EF4444', '#7C2D12'
      ][index % 5],
      legendFontColor: theme.colors.text,
      legendFontSize: 12,
    })
  );

  // Weekly mood comparison
  const weeklyData = {
    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
    datasets: [
      {
        data: Array.from({ length: 7 }, (_, i) => {
          const dayMoods = moods.filter(mood => {
            const moodDate = new Date(mood.timestamp);
            const targetDate = new Date();
            targetDate.setDate(targetDate.getDate() - (6 - i));
            return moodDate.toDateString() === targetDate.toDateString();
          });
          return dayMoods.length > 0 
            ? dayMoods.reduce((sum, mood) => sum + mood.value, 0) / dayMoods.length
            : 0;
        }),
      },
    ],
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Summary Stats */}
        <Card>
          <Text style={styles.cardTitle}>Your Mood Summary</Text>
          <View style={styles.statsGrid}>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>
                {analytics.averageMood.toFixed(1)}
              </Text>
              <Text style={styles.statLabel}>Average Mood</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>
                {moods.length}
              </Text>
              <Text style={styles.statLabel}>Total Entries</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>
                {analytics.weeklyAverage.toFixed(1)}
              </Text>
              <Text style={styles.statLabel}>This Week</Text>
            </View>
          </View>
        </Card>

        {/* Mood Trend Chart */}
        <Card>
          <Text style={styles.cardTitle}>7-Day Mood Trend</Text>
          <LineChart
            data={moodTrendData}
            width={screenWidth - 60}
            height={200}
            chartConfig={chartConfig}
            bezier
            style={styles.chart}
            withDots
            withShadow={false}
            withVerticalLabels
            withHorizontalLabels
            fromZero
            segments={4}
          />
        </Card>

        {/* Weekly Comparison */}
        <Card>
          <Text style={styles.cardTitle}>Weekly Overview</Text>
          <BarChart
            data={weeklyData}
            width={screenWidth - 60}
            height={200}
            chartConfig={chartConfig}
            style={styles.chart}
            showValuesOnTopOfBars
            fromZero
            segments={4}
          />
        </Card>

        {/* Mood Distribution */}
        <Card>
          <Text style={styles.cardTitle}>Mood Distribution</Text>
          <PieChart
            data={moodDistributionData}
            width={screenWidth - 60}
            height={200}
            chartConfig={chartConfig}
            accessor="population"
            backgroundColor="transparent"
            paddingLeft="15"
            style={styles.chart}
            absolute
          />
        </Card>

        {/* Insights */}
        <Card>
          <Text style={styles.cardTitle}>Insights</Text>
          <View style={styles.insights}>
            <View style={styles.insightItem}>
              <Text style={styles.insightTitle}>Most Common Mood</Text>
              <Text style={styles.insightValue}>
                {Object.entries(analytics.moodDistribution).reduce((a, b) => 
                  analytics.moodDistribution[a[0]] > analytics.moodDistribution[b[0]] ? a : b
                )[0]}
              </Text>
            </View>
            <View style={styles.insightItem}>
              <Text style={styles.insightTitle}>Streak</Text>
              <Text style={styles.insightValue}>
                {calculateStreak(moods)} days
              </Text>
            </View>
            <View style={styles.insightItem}>
              <Text style={styles.insightTitle}>Best Day</Text>
              <Text style={styles.insightValue}>
                {getBestDay(moods)}
              </Text>
            </View>
          </View>
        </Card>
      </ScrollView>
    </SafeAreaView>
  );
};

// Helper functions
const calculateStreak = (moods) => {
  if (moods.length === 0) return 0;
  
  let streak = 0;
  const today = new Date();
  
  for (let i = 0; i < 30; i++) {
    const checkDate = new Date(today);
    checkDate.setDate(today.getDate() - i);
    
    const hasEntry = moods.some(mood => 
      new Date(mood.timestamp).toDateString() === checkDate.toDateString()
    );
    
    if (hasEntry) {
      streak++;
    } else {
      break;
    }
  }
  
  return streak;
};

const getBestDay = (moods) => {
  if (moods.length === 0) return 'N/A';
  
  const bestMood = moods.reduce((best, current) => 
    current.value > best.value ? current : best
  );
  
  return new Date(bestMood.timestamp).toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric' 
  });
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  scrollView: {
    flex: 1,
    paddingHorizontal: theme.spacing.md,
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: theme.spacing.xl,
  },
  emptyText: {
    fontSize: 16,
    color: theme.colors.textSecondary,
    textAlign: 'center',
    lineHeight: 24,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: theme.colors.text,
    marginBottom: theme.spacing.md,
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 28,
    fontWeight: 'bold',
    color: theme.colors.primary,
    marginBottom: theme.spacing.xs,
  },
  statLabel: {
    fontSize: 12,
    color: theme.colors.textSecondary,
    textAlign: 'center',
  },
  chart: {
    marginVertical: theme.spacing.sm,
    borderRadius: theme.borderRadius.lg,
  },
  insights: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  insightItem: {
    alignItems: 'center',
    flex: 1,
  },
  insightTitle: {
    fontSize: 12,
    color: theme.colors.textSecondary,
    marginBottom: theme.spacing.xs,
    textAlign: 'center',
  },
  insightValue: {
    fontSize: 16,
    fontWeight: '600',
    color: theme.colors.text,
    textAlign: 'center',
  },
});

export default AnalyticsScreen;

// ==================== PROFILE SCREEN ====================
// src/screens/ProfileScreen.js
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  Image,
  TouchableOpacity,
  Alert,
  Switch,
} from 'react-native';
import { useAuth } from '../contexts/AuthContext';
import { useMood } from '../contexts/MoodContext';
import { useTheme } from '../contexts/ThemeContext';
import Card from '../components/common/Card';
import Button from '../components/common/Button';
import { theme as defaultTheme } from '../constants/theme';
import Icon from 'react-native-vector-icons/MaterialIcons';

const ProfileScreen = () => {
  const { user, signOut } = useAuth();
  const { moods } = useMood();
  const { theme, isDarkMode, toggleTheme } = useTheme();
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);

  const handleSignOut = () => {
    Alert.alert(
      'Sign Out',
      'Are you sure you want to sign out?',
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Sign Out', onPress: signOut, style: 'destructive' },
      ]
    );
  };

  const handleExportData = () => {
    Alert.alert(
      'Export Data',
      'This feature will export your mood data to a CSV file.',
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Export', onPress: () => console.log('Export data') },
      ]
    );
  };

  const handleDeleteData = () => {
    Alert.alert(
      'Delete All Data',
      'This action cannot be undone. All your mood entries will be permanently deleted.',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Delete', 
          onPress: () => console.log('Delete all data'),
          style: 'destructive' 
        },
      ]
    );
  };

  const settingsOptions = [
    {
      title: 'Dark Mode',
      icon: 'dark-mode',
      type: 'switch',
      value: isDarkMode,
      onPress: toggleTheme,
    },
    {
      title: 'Notifications',
      icon: 'notifications',
      type: 'switch',
      value: notificationsEnabled,
      onPress: () => setNotificationsEnabled(!notificationsEnabled),
    },
    {
      title: 'Export Data',
      icon: 'file-download',
      type: 'action',
      onPress: handleExportData,
    },
    {
      title: 'Privacy Policy',
      icon: 'privacy-tip',
      type: 'action',
      onPress: () => console.log('Privacy Policy'),
    },
    {
      title: 'Terms of Service',
      icon: 'description',
      type: 'action',
      onPress: () => console.log('Terms of Service'),
    },
    {
      title: 'Help & Support',
      icon: 'help',
      type: 'action',
      onPress: () => console.log('Help & Support'),
    },
  ];

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* User Profile Section */}
        <Card style={styles.profileCard}>
          <View style={styles.profileHeader}>
            <Image
              source={
                user?.photo 
                  ? { uri: user.photo }
                  : require('../assets/default-avatar.png')
              }
              style={styles.avatar}
            />
            <View style={styles.userInfo}>
              <Text style={styles.userName}>{user?.name || 'User'}</Text>
              <Text style={styles.userEmail}>{user?.email || 'user@example.com'}</Text>
            </View>
          </View>
        </Card>

        {/* Stats Section */}
        <Card>
          <Text style={styles.cardTitle}>Your Journey</Text>
          <View style={styles.statsRow}>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{moods.length}</Text>
              <Text style={styles.statLabel}>Total Entries</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>
                {Math.max(1, Math.floor(moods.length / 30))}
              </Text>
              <Text style={styles.statLabel}>Months Active</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>
                {moods.length > 0 ? calculateStreak(moods) : 0}
              </Text>
              <Text style={styles.statLabel}>Day Streak</Text>
            </View>
          </View>
        </Card>

        {/* Settings Section */}
        <Card>
          <Text style={styles.cardTitle}>Settings</Text>
          {settingsOptions.map((option, index) => (
            <TouchableOpacity
              key={index}
              style={styles.settingRow}
              onPress={option.onPress}
              disabled={option.type === 'switch'}
              accessibilityRole={option.type === 'switch' ? 'switch' : 'button'}
              accessibilityLabel={option.title}
            >
              <View style={styles.settingLeft}>
                <Icon 
                  name={option.icon} 
                  size={24} 
                  color={defaultTheme.colors.textSecondary} 
                />
                <Text style={styles.settingTitle}>{option.title}</Text>
              </View>
              {option.type === 'switch' ? (
                <Switch
                  value={option.value}
                  onValueChange={option.onPress}
                  trackColor={{ 
                    false: defaultTheme.colors.border, 
                    true: defaultTheme.colors.primary 
                  }}
                  thumbColor={defaultTheme.colors.white}
                />
              ) : (
                <Icon 
                  name="chevron-right" 
                  size={24} 
                  color={defaultTheme.colors.textSecondary} 
                />
              )}
            </TouchableOpacity>
          ))}
        </Card>

        {/* Danger Zone */}
        <Card style={styles.dangerCard}>
          <Text style={styles.cardTitle}>Danger Zone</Text>
          <Button
            title="Delete All Data"
            onPress={handleDeleteData}
            variant="outline"
            style={[styles.dangerButton, { borderColor: defaultTheme.colors.error }]}
          />
        </Card>

        {/* Sign Out Button */}
        <Button
          title="Sign Out"
          onPress={handleSignOut}
          variant="outline"
          style={styles.signOutButton}
        />

        {/* App Version */}
        <View style={styles.versionInfo}>
          <Text style={styles.versionText}>Mood Tracker v1.0.0</Text>
          <Text style={styles.versionText}>Made with ❤️</Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

// Helper function (reused from AnalyticsScreen)
const calculateStreak = (moods) => {
  if (moods.length === 0) return 0;
  
  let streak = 0;
  const today = new Date();
  
  for (let i = 0; i < 30; i++) {
    const checkDate = new Date(today);
    checkDate.setDate(today.getDate() - i);
    
    const hasEntry = moods.some(mood => 
      new Date(mood.timestamp).toDateString() === checkDate.toDateString()
    );
    
    if (hasEntry) {
      streak++;
    } else {
      break;
    }
  }
  
  return streak;
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: defaultTheme.colors.background,
  },
  scrollView: {
    flex: 1,
    paddingHorizontal: defaultTheme.spacing.md,
  },
  profileCard: {
    marginTop: defaultTheme.spacing.md,
  },
  profileHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  avatar: {
    width: 80,
    height: 80,
    borderRadius: 40,
    marginRight: defaultTheme.spacing.md,
    backgroundColor: defaultTheme.colors.surface,
  },
  userInfo: {
    flex: 1,
  },
  userName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: defaultTheme.colors.text,
    marginBottom: defaultTheme.spacing.xs,
  },
  userEmail: {
    fontSize: 16,
    color: defaultTheme.colors.textSecondary,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: defaultTheme.colors.text,
    marginBottom: defaultTheme.spacing.md,
  },
  statsRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: defaultTheme.colors.primary,
    marginBottom: defaultTheme.spacing.xs,
  },
  statLabel: {
    fontSize: 12,
    color: defaultTheme.colors.textSecondary,
    textAlign: 'center',
  },
  settingRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: defaultTheme.spacing.md,
    borderBottomWidth: 1,
    borderBottomColor: defaultTheme.colors.border,
  },
  settingLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  settingTitle: {
    fontSize: 16,
    color: defaultTheme.colors.text,
    marginLeft: defaultTheme.spacing.md,
  },
  dangerCard: {
    borderColor: defaultTheme.colors.error + '20',
    borderWidth: 1,
  },
  dangerButton: {
    borderColor: defaultTheme.colors.error,
  },
  signOutButton: {
    marginVertical: defaultTheme.spacing.lg,
  },
  versionInfo: {
    alignItems: 'center',
    paddingVertical: defaultTheme.spacing.xl,
  },
  versionText: {
    fontSize: 12,
    color: defaultTheme.colors.textSecondary,
    marginBottom: defaultTheme.spacing.xs,
  },
});

export default ProfileScreen;

// ==================== ADDITIONAL HELPER COMPONENTS ====================

// src/components/common/LoadingSpinner.js
import React from 'react';
import { View, ActivityIndicator, Text, StyleSheet } from 'react-native';
import { theme } from '../../constants/theme';

const LoadingSpinner = ({ text = 'Loading...', size = 'large' }) => {
  return (
    <View style={styles.container}>
      <ActivityIndicator size={size} color={theme.colors.primary} />
      {text && <Text style={styles.text}>{text}</Text>}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: theme.spacing.xl,
  },
  text: {
    marginTop: theme.spacing.md,
    fontSize: 16,
    color: theme.colors.textSecondary,
    textAlign: 'center',
  },
});

export default LoadingSpinner;

// ==================== ERROR BOUNDARY ====================
// src/components/common/ErrorBoundary.js
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import Button from './Button';
import { theme } from '../../constants/theme';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <View style={styles.container}>
          <Text style={styles.title}>Oops! Something went wrong</Text>
          <Text style={styles.message}>
            We're sorry for the inconvenience. Please try again.
          </Text>
          <Button
            title="Try Again"
            onPress={() => this.setState({ hasError: false })}
            style={styles.button}
          />
        </View>
      );
    }

    return this.props.children;
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: theme.spacing.xl,
    backgroundColor: theme.colors.background,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: theme.colors.text,
    marginBottom: theme.spacing.md,
    textAlign: 'center',
  },
  message: {
    fontSize: 16,
    color: theme.colors.textSecondary,
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: theme.spacing.xl,
  },
  button: {
    marginTop: theme.spacing.lg,
  },
});

export default ErrorBoundary;

// ==================== APP CONFIGURATION ====================
// metro.config.js
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

module.exports = config;

// babel.config.js
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      'react-native-reanimated/plugin',
    ],
  };
};

// app.config.js
export default {
  expo: {
    name: 'Mood Tracker',
    slug: 'mood-tracker',
    version: '1.0.0',
    orientation: 'portrait',
    icon: './assets/icon.png',
    userInterfaceStyle: 'light',
    splash: {
      image: './assets/splash.png',
      resizeMode: 'contain',
      backgroundColor: '#6366F1'
    },
    updates: {
      fallbackToCacheTimeout: 0
    },
    assetBundlePatterns: [
      '**/*'
    ],
    ios: {
      supportsTablet: true,
      bundleIdentifier: 'com.yourcompany.moodtracker'
    },
    android: {
      adaptiveIcon: {
        foregroundImage: './assets/adaptive-icon.png',
        backgroundColor: '#6366F1'
      },
      package: 'com.yourcompany.moodtracker',
      permissions: [
        'android.permission.INTERNET',
        'android.permission.READ_EXTERNAL_STORAGE',
        'android.permission.WRITE_EXTERNAL_STORAGE'
      ]
    },
    web: {
      favicon: './assets/favicon.png'
    },
    plugins: [
      '@react-native-google-signin/google-signin',
      'react-native-fbsdk-next'
    ]
  }
};