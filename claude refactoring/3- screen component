// ==================== SCREEN COMPONENTS ====================

// ==================== AUTH SCREEN ====================
// src/screens/AuthScreen.js
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  Image,
  Alert,
} from 'react-native';
import LinearGradient from 'expo-linear-gradient';
import { useAuth } from '../contexts/AuthContext';
import Button from '../components/common/Button';
import { theme } from '../constants/theme';

const AuthScreen = () => {
  const { signInWithGoogle, signInWithFacebook } = useAuth();
  const [loading, setLoading] = useState({ google: false, facebook: false });

  const handleGoogleSignIn = async () => {
    setLoading({ ...loading, google: true });
    const result = await signInWithGoogle();
    setLoading({ ...loading, google: false });
    
    if (!result.success) {
      Alert.alert('Error', result.error || 'Google sign-in failed');
    }
  };

  const handleFacebookSignIn = async () => {
    setLoading({ ...loading, facebook: true });
    const result = await signInWithFacebook();
    setLoading({ ...loading, facebook: false });
    
    if (!result.success) {
      Alert.alert('Error', result.error || 'Facebook sign-in failed');
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <LinearGradient
        colors={[theme.colors.primary, theme.colors.secondary]}
        style={styles.gradient}
      >
        <View style={styles.content}>
          <View style={styles.header}>
            <Image
              source={require('../assets/logo.png')} // Add your logo
              style={styles.logo}
              resizeMode="contain"
            />
            <Text style={styles.title}>Mood Tracker</Text>
            <Text style={styles.subtitle}>
              Track your emotions and understand your mental wellness journey
            </Text>
          </View>

          <View style={styles.buttonContainer}>
            <Button
              title="Continue with Google"
              onPress={handleGoogleSignIn}
              loading={loading.google}
              variant="primary"
              size="large"
              style={[styles.authButton, styles.googleButton]}
            />
            
            <Button
              title="Continue with Facebook"
              onPress={handleFacebookSignIn}
              loading={loading.facebook}
              variant="secondary"
              size="large"
              style={[styles.authButton, styles.facebookButton]}
            />
          </View>

          <Text style={styles.disclaimer}>
            By continuing, you agree to our Terms of Service and Privacy Policy
          </Text>
        </View>
      </LinearGradient>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  gradient: {
    flex: 1,
  },
  content: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: theme.spacing.xl,
  },
  header: {
    alignItems: 'center',
    marginBottom: theme.spacing.xxl,
  },
  logo: {
    width: 120,
    height: 120,
    marginBottom: theme.spacing.lg,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: theme.colors.white,
    marginBottom: theme.spacing.sm,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: theme.colors.white,
    textAlign: 'center',
    opacity: 0.9,
    lineHeight: 24,
  },
  buttonContainer: {
    width: '100%',
    marginBottom: theme.spacing.xl,
  },
  authButton: {
    marginBottom: theme.spacing.md,
    backgroundColor: theme.colors.white,
  },
  googleButton: {
    backgroundColor: theme.colors.white,
  },
  facebookButton: {
    backgroundColor: '#1877F2',
  },
  disclaimer: {
    fontSize: 12,
    color: theme.colors.white,
    textAlign: 'center',
    opacity: 0.8,
    lineHeight: 18,
  },
});

export default AuthScreen;

// ==================== HOME SCREEN ====================
// src/screens/HomeScreen.js
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  SafeAreaView,
  TouchableOpacity,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { useAuth } from '../contexts/AuthContext';
import { useMood } from '../contexts/MoodContext';
import Card from '../components/common/Card';
import Button from '../components/common/Button';
import { theme } from '../constants/theme';
import Icon from 'react-native-vector-icons/MaterialIcons';

const HomeScreen = () => {
  const navigation = useNavigation();
  const { user } = useAuth();
  const { moods, getMoodAnalytics } = useMood();
  
  const analytics = getMoodAnalytics();
  const todaysMood = moods.find(mood => 
    new Date(mood.timestamp).toDateString() === new Date().toDateString()
  );

  const quickActions = [
    {
      title: 'Add Mood',
      icon: 'add-circle',
      onPress: () => navigation.navigate('Mood'),
      color: theme.colors.primary,
    },
    {
      title: 'View Analytics',
      icon: 'analytics',
      onPress: () => navigation.navigate('Analytics'),
      color: theme.colors.secondary,
    },
    {
      title: 'Read Journal',
      icon: 'picture-as-pdf',
      onPress: () => navigation.navigate('PDFViewer', { 
        pdfUrl: 'https://example.com/sample.pdf' 
      }),
      color: theme.colors.info,
    },
  ];

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.header}>
          <Text style={styles.greeting}>
            Hello, {user?.name || 'User'}! 👋
          </Text>
          <Text style={styles.date}>
            {new Date().toLocaleDateString('en-US', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </Text>
        </View>

        {/* Today's Mood Status */}
        <Card style={styles.moodCard}>
          <Text style={styles.cardTitle}>Today's Mood</Text>
          {todaysMood ? (
            <View style={styles.moodStatus}>
              <Text style={styles.moodEmoji}>{todaysMood.emoji}</Text>
              <Text style={styles.moodLabel}>{todaysMood.label}</Text>
              <Text style={styles.moodNote}>{todaysMood.note}</Text>
            </View>
          ) : (
            <View style={styles.noMood}>
              <Text style={styles.noMoodText}>No mood recorded today</Text>
              <Button
                title="Add Your Mood"
                onPress={() => navigation.navigate('Mood')}
                variant="primary"
                size="small"
                style={styles.addMoodButton}
              />
            </View>
          )}
        </Card>

        {/* Quick Actions */}
        <Card>
          <Text style={styles.cardTitle}>Quick Actions</Text>
          <View style={styles.quickActions}>
            {quickActions.map((action, index) => (
              <TouchableOpacity
                key={index}
                style={[styles.actionButton, { backgroundColor: action.color }]}
                onPress={action.onPress}
                accessibilityRole="button"
                accessibilityLabel={action.title}
              >
                <Icon name={action.icon} size={24} color={theme.colors.white} />
                <Text style={styles.actionText}>{action.title}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </Card>

        {/* Weekly Summary */}
        <Card>
          <Text style={styles.cardTitle}>This Week</Text>
          <View style={styles.summaryRow}>
            <View style={styles.summaryItem}>
              <Text style={styles.summaryValue}>
                {analytics.weeklyAverage.toFixed(1)}
              </Text>
              <Text style={styles.summaryLabel}>Avg Mood</Text>
            </View>
            <View style={styles.summaryItem}>
              <Text style={styles.summaryValue}>
                {moods.filter(mood => {
                  const weekAgo = new Date();
                  weekAgo.setDate(weekAgo.getDate() - 7);
                  return new Date(mood.timestamp) >= weekAgo;
                }).length}
              </Text>
              <Text style={styles.summaryLabel}>Entries</Text>
            </View>
            <View style={styles.summaryItem}>
              <Text style={styles.summaryValue}>
                {Math.max(0, analytics.weeklyAverage - 3).toFixed(1)}
              </Text>
              <Text style={styles.summaryLabel}>Improvement</Text>
            </View>
          </View>
        </Card>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  scrollView: {
    flex: 1,
    paddingHorizontal: theme.spacing.md,
  },
  header: {
    marginVertical: theme.spacing.lg,
  },
  greeting: {
    fontSize: 24,
    fontWeight: 'bold',
    color: theme.colors.text,
    marginBottom: theme.spacing.xs,
  },
  date: {
    fontSize: 16,
    color: theme.colors.textSecondary,
  },
  moodCard: {
    marginBottom: theme.spacing.md,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: theme.colors.text,
    marginBottom: theme.spacing.md,
  },
  moodStatus: {
    alignItems: 'center',
  },
  moodEmoji: {
    fontSize: 48,
    marginBottom: theme.spacing.sm,
  },
  moodLabel: {
    fontSize: 20,
    fontWeight: '600',
    color: theme.colors.text,
    marginBottom: theme.spacing.xs,
  },
  moodNote: {
    fontSize: 14,
    color: theme.colors.textSecondary,
    textAlign: 'center',
  },
  noMood: {
    alignItems: 'center',
    paddingVertical: theme.spacing.lg,
  },
  noMoodText: {
    fontSize: 16,
    color: theme.colors.textSecondary,
    marginBottom: theme.spacing.md,
  },
  addMoodButton: {
    marginTop: theme.spacing.sm,
  },
  quickActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  actionButton: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: theme.spacing.lg,
    marginHorizontal: theme.spacing.xs,
    borderRadius: theme.borderRadius.md,
  },
  actionText: {
    color: theme.colors.white,
    fontSize: 12,
    fontWeight: '600',
    marginTop: theme.spacing.xs,
    textAlign: 'center',
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  summaryItem: {
    alignItems: 'center',
  },
  summaryValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: theme.colors.primary,
    marginBottom: theme.spacing.xs,
  },
  summaryLabel: {
    fontSize: 12,
    color: theme.colors.textSecondary,
    textAlign: 'center',
  },
});

export default HomeScreen;

// ==================== MOOD ENTRY SCREEN ====================
// src/screens/MoodEntryScreen.js
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
} from 'react-native';
import { useMood } from '../contexts/MoodContext';
import Card from '../components/common/Card';
import Button from '../components/common/Button';
import { theme } from '../constants/theme';

const MOOD_OPTIONS = [
  { value: 5, label: 'Excellent', emoji: '😍', color: '#10B981' },
  { value: 4, label: 'Good', emoji: '😊', color: '#3B82F6' },
  { value: 3, label: 'Okay', emoji: '😐', color: '#F59E0B' },
  { value: 2, label: 'Bad', emoji: '😔', color: '#EF4444' },
  { value: 1, label: 'Terrible', emoji: '😭', color: '#7C2D12' },
];

const MoodEntryScreen = () => {
  const { saveMood } = useMood();
  const [selectedMood, setSelectedMood] = useState(null);
  const [note, setNote] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSaveMood = async () => {
    if (!selectedMood) {
      Alert.alert('Error', 'Please select a mood');
      return;
    }

    setLoading(true);
    const result = await saveMood({
      ...selectedMood,
      note: note.trim(),
    });
    setLoading(false);

    if (result.success) {
      Alert.alert('Success', 'Mood saved successfully!', [
        { text: 'OK', onPress: () => {
          setSelectedMood(null);
          setNote('');
        }}
      ]);
    } else {
      Alert.alert('Error', result.error || 'Failed to save mood');
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.header}>
          <Text style={styles.title}>How are you feeling?</Text>
          <Text style={styles.subtitle}>
            Take a moment to reflect on your current emotional state
          </Text>
        </View>

        <Card>
          <Text style={styles.sectionTitle}>Select Your Mood</Text>
          <View style={styles.moodGrid}>
            {MOOD_OPTIONS.map((mood) => (
              <TouchableOpacity
                key={mood.value}
                style={[
                  styles.moodOption,
                  selectedMood?.value === mood.value && styles.selectedMood,
                  { borderColor: mood.color }
                ]}
                onPress={() => setSelectedMood(mood)}
                accessibilityRole="button"
                accessibilityLabel={`Select ${mood.label} mood`}
                accessibilityState={{ selected: selectedMood?.value === mood.value }}
              >
                <Text style={styles.moodEmoji}>{mood.emoji}</Text>
                <Text style={styles.moodLabel}>{mood.label}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </Card>

        <Card>
          <Text style={styles.sectionTitle}>Add a Note (Optional)</Text>
          <TextInput
            style={styles.noteInput}
            placeholder="What's on your mind? How was your day?"
            value={note}
            onChangeText={setNote}
            multiline
            numberOfLines={4}
            textAlignVertical="top"
            maxLength={500}
            accessibilityLabel="Mood note input"
            accessibilityHint="Add optional details about your mood"
          />
          <Text style={styles.characterCount}>
            {note.length}/500 characters
          </Text>
        </Card>

        {selectedMood && (
          <Card style={styles.previewCard}>
            <Text style={styles.sectionTitle}>Preview</Text>
            <View style={styles.preview}>
              <Text style={styles.previewEmoji}>{selectedMood.emoji}</Text>
              <Text style={styles.previewLabel}>{selectedMood.label}</Text>
              {note.trim() && (
                <Text style={styles.previewNote}>"{note.trim()}"</Text>
              )}
            </View>
          </Card>
        )}

        <Button
          title="Save Mood"
          onPress={handleSaveMood}
          loading={loading}
          disabled={!selectedMood}
          variant="primary"
          size="large"
          style={styles.saveButton}
        />
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  scrollView: {
    flex: 1,
    paddingHorizontal: theme.spacing.md,
  },
  header: {
    marginVertical: theme.spacing.lg,
    alignItems: 'center',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: theme.colors.text,
    marginBottom: theme.spacing.sm,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: theme.colors.textSecondary,
    textAlign: 'center',
    lineHeight: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: theme.colors.text,
    marginBottom: theme.spacing.md,
  },
  moodGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  moodOption: {
    width: '30%',
    aspectRatio: 1,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: theme.borderRadius.lg,
    borderWidth: 2,
    borderColor: theme.colors.border,
    marginBottom: theme.spacing.md,
    backgroundColor: theme.colors.surface,
  },
  selectedMood: {
    backgroundColor: theme.colors.primary + '10',
    borderWidth: 3,
  },
  moodEmoji: {
    fontSize: 32,
    marginBottom: theme.spacing.xs,
  },
  moodLabel: {
    fontSize: 12,
    fontWeight: '600',
    color: theme.colors.text,
    textAlign: 'center',
  },
  noteInput: {
    borderWidth: 1,
    borderColor: theme.colors.border,
    borderRadius: theme.borderRadius.md,
    padding: theme.spacing.md,
    fontSize: 16,
    color: theme.colors.text,
    backgroundColor: theme.colors.surface,
    minHeight: 100,
  },
  characterCount: {
    fontSize: 12,
    color: theme.colors.textSecondary,
    textAlign: 'right',
    marginTop: theme.spacing.xs,
  },
  previewCard: {
    backgroundColor: theme.colors.primary + '05',
    borderWidth: 1,
    borderColor: theme.colors.primary + '20',
  },
  preview: {
    alignItems: 'center',
  },
  previewEmoji: {
    fontSize: 48,
    marginBottom: theme.spacing.sm,
  },
  previewLabel: {
    fontSize: 20,
    fontWeight: '600',
    color: theme.colors.text,
    marginBottom: theme.spacing.sm,
  },
  previewNote: {
    fontSize: 14,
    color: theme.colors.textSecondary,
    textAlign: 'center',
    fontStyle: 'italic',
  },
  saveButton: {
    marginVertical: theme.spacing.xl,
  },
});

export default MoodEntryScreen;

// ==================== PDF VIEWER SCREEN ====================
// src/screens/PDFViewerScreen.js
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ActivityIndicator,
  Alert,
  Dimensions,
} from 'react-native';
import Pdf from 'react-native-pdf';
import { pdfService } from '../services/pdfService';
import { theme } from '../constants/theme';

const PDFViewerScreen = ({ route }) => {
  const { pdfUrl } = route.params;
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(0);

  useEffect(() => {
    validatePDF();
  }, [pdfUrl]);

  const validatePDF = async () => {
    if (!pdfUrl) {
      setError('No PDF URL provided');
      setLoading(false);
      return;
    }

    const isValid = await pdfService.validatePDFUrl(pdfUrl);
    if (!isValid) {
      setError('Invalid PDF URL or file not accessible');
      setLoading(false);
    }
  };

  const handleLoadComplete = (numberOfPages, filePath) => {
    setTotalPages(numberOfPages);
    setLoading(false);
    console.log(`PDF loaded: ${numberOfPages} pages`);
  };

  const handlePageChanged = (page, numberOfPages) => {
    setCurrentPage(page);
  };

  const handleError = (error) => {
    console.error('PDF Error:', error);
    setError('Failed to load PDF. Please try again.');
    setLoading(false);
  };

  if (error) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>{error}</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {loading && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={theme.colors.primary} />
          <Text style={styles.loadingText}>Loading PDF...</Text>
        </View>
      )}
      
      <Pdf
        source={{ uri: pdfUrl, cache: true }}
        onLoadComplete={handleLoadComplete}
        onPageChanged={handlePageChanged}
        onError={handleError}
        onLoadProgress={(percent) => {
          console.log(`Loading: ${Math.round(percent * 100)}%`);
        }}
        style={styles.pdf}
        trustAllCerts={false}
        renderActivityIndicator={() => (
          <ActivityIndicator color={theme.colors.primary} size="large" />
        )}
        enablePaging={true}
        enableRTL={false}
        enableAnnotationRendering={true}
        password=""
        spacing={0}
        minScale={1.0}
        maxScale={3.0}
        scale={1.0}
        horizontal={false}
        page={currentPage}
        onScaleChanged={(scale) => {
          console.log('Scale changed:', scale);
        }}
      />
      
      {totalPages > 0 && (
        <View style={styles.pageIndicator}>
          <Text style={styles.pageText}>
            Page {currentPage} of {totalPages}
          </Text>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  loadingContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: theme.colors.overlay,
    zIndex: 1000,
  },
  loadingText: {
    marginTop: theme.spacing.md,
    fontSize: 16,
    color: theme.colors.white,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: theme.spacing.xl,
  },
  errorText: {
    fontSize: 16,
    color: theme.colors.error,
    textAlign: 'center',
    lineHeight: 24,
  },
  pdf: {
    flex: 1,
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
  pageIndicator: {
    position: 'absolute',
    bottom: 30,
    alignSelf: 'center',
    backgroundColor: theme.colors.overlay,
    paddingHorizontal: theme.spacing.md,
    paddingVertical: theme.spacing.sm,
    borderRadius: theme.borderRadius.md,
  },
  pageText: {
    color: theme.colors.white,
    fontSize: 14,
    fontWeight: '600',
  },
});

export default PDFViewerScreen;